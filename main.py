import os
import discord
import requests
import asyncio
from discord import app_commands

from myserver import server_on

# Discord Bot Token
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')

# Twitch API Credentials
CLIENT_ID = os.getenv('CLIENT_ID')
CLIENT_SECRET = os.getenv('CLIENT_SECRET')
TWITCH_USERNAME = 'Uranutsu'

# URLs for Twitch API
OAUTH_URL = 'https://id.twitch.tv/oauth2/token'
USER_INFO_URL = 'https://api.twitch.tv/helix/users'
STREAMS_URL = 'https://api.twitch.tv/helix/streams'

# Intents for Discord bot
intents = discord.Intents.default()
intents.message_content = True

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord
client = discord.Client(intents=intents)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á tree ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Slash Commands
tree = app_commands.CommandTree(client)

@tree.command(name="twitch", description="Check if the Twitch user is live")
async def twitch(interaction: discord.Interaction):
    token = get_twitch_token()
    user_id, icon_url = get_user_id(TWITCH_USERNAME, token)
    stream = check_live_status(user_id, token)

    if stream:
        embed = discord.Embed(
            title=f'{TWITCH_USERNAME} is live on Twitch!',
            description=f'Watch here: https://twitch.tv/{TWITCH_USERNAME}',
            color=0x9146FF
        )
        embed.set_thumbnail(url=icon_url)
        await interaction.response.send_message(embed=embed)
    else:
        await interaction.response.send_message(f'{TWITCH_USERNAME} is not live on Twitch.')

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    if message.content.startswith('!rule'):
        rules = (
            "‚ú®   ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô    üëë:\n\n"
            "‚öù ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ã‡∏∂‡πà‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô\n\n"
            "‚öù ‡πÑ‡∏°‡πà‡∏ã‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏™‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏û‡∏≠‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°\n\n"
            "‚öù ‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏ô‡∏±‡∏™‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡πÄ‡∏ü‡∏£‡∏ô‡∏ô‡∏±‡∏™‡∏°‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ó‡πá‡∏Å‡∏ô‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ\n\n"
            "‚öù ‡πÑ‡∏°‡πà‡∏û‡∏≤‡∏î‡∏û‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏î‡∏™‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢\n\n"
            "‚öù ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏≤‡∏°‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô\n\n"
            "‚öù ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πÅ‡∏õ‡∏°‡πÅ‡∏ä‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡πÜ ‡∏£‡∏±‡∏ß‡πÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≥‡∏Ñ‡∏≤‡∏ç‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πà‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô\n\n"
            "‚öù ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ù‡∏≤‡∏Å‡∏Ñ‡∏•‡∏¥‡∏õ / ‡∏ù‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á <#1279197214069231656> ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡πâ‡∏≠‡∏á\n\n"
            "‚öù ‡∏ã‡∏±‡∏û‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ó‡πá‡∏Å‡∏ä‡∏ß‡∏ô‡∏ô‡∏±‡∏™‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á <#1267799728846802985> ‡∏ñ‡πâ‡∏≤‡∏ô‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô\n\n"
            "‚öù ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ó‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏™‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß\n\n"
            "‚úø ‡∏´‡∏≤‡∏Å‡∏ó‡∏≥‡∏ú‡∏¥‡∏î‡∏Å‡∏é 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡πÑ‡∏õ‡∏ï‡∏±‡∏Å‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 3 ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡∏≠‡∏≠‡∏Å‡∏î‡∏¥‡∏™‡∏ñ‡∏≤‡∏ß‡∏£‡∏Ñ‡πà‡∏∞  @everyone ‚úø"
        )

        message_sent = await message.channel.send(rules)
        await message_sent.add_reaction("‚úÖ")

# Get Twitch OAuth Token
def get_twitch_token():
    params = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'grant_type': 'client_credentials'
    }
    response = requests.post(OAUTH_URL, params=params)
    return response.json().get('access_token')

# Get Twitch user ID by username
def get_user_id(twitch_username, token):
    headers = {
        'Client-ID': CLIENT_ID,
        'Authorization': f'Bearer {token}'
    }
    params = {'login': twitch_username}
    response = requests.get(USER_INFO_URL, headers=headers, params=params)
    data = response.json().get('data')
    if data:
        return data[0]['id'], data[0]['profile_image_url']
    return None, None

# Check if the user is live
def check_live_status(user_id, token):
    headers = {
        'Client-ID': CLIENT_ID,
        'Authorization': f'Bearer {token}'
    }
    params = {'user_id': user_id}
    response = requests.get(STREAMS_URL, headers=headers, params=params)
    streams = response.json().get('data')
    if streams:
        return streams[0]
    return None

# Task to check Twitch live status periodically
async def live_status_task():
    await client.wait_until_ready()
    channel = client.get_channel(1267797428849868811)  # ‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á Discord ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    token = get_twitch_token()
    user_id, icon_url = get_user_id(TWITCH_USERNAME, token)

    is_live = False

    while not client.is_closed():
        stream = check_live_status(user_id, token)
        if stream and not is_live:
            title = stream['title']
            game_name = stream['game_name']
            viewer_count = stream['viewer_count']
            thumbnail_url = stream['thumbnail_url'].replace("{width}x{height}", "1280x720")

            embed = discord.Embed(
                description=f'**[{title}](https://twitch.tv/{TWITCH_USERNAME})**',
                color=0x9146FF
            )
            embed.set_author(
                name=f'{TWITCH_USERNAME} is live on Twitch!',
                url=f'https://twitch.tv/{TWITCH_USERNAME}',
                icon_url=icon_url
            )
            embed.add_field(name='Game', value=game_name, inline=True)
            embed.add_field(name='Viewers', value=viewer_count, inline=True)
            embed.set_image(url=thumbnail_url)

            await channel.send(f'‚ù• Uranutsu ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ @everyone  ï ·µí ·¥• ·µí î', embed=embed)
            is_live = True
        elif not stream and is_live:
            await channel.send(f'{TWITCH_USERNAME} has ended their stream.')
            is_live = False

        await asyncio.sleep(60)  # ‡∏£‡∏≠ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
@client.event
async def on_ready():
    print(f'Logged in as {client.user}')
    await tree.sync()
    client.loop.create_task(live_status_task())

server_on

client.run(DISCORD_TOKEN)
